#!/bin/sh
#
# irc
#
# Purpose:
#   Interactive shell script to help automate IRC (privmsg) from the command line.
#   - Maintains a keepalive PONG every 60s (works with nc or ncat).
#   - Supports /msg, autoprivmsg to channels, batch file send, and basic quick commands.
#   - Easy to debug: just pipes output through nc/ncat, or can echo for dry run.
#
# Usage:
#   ./irc-client-helper.sh | nc -v -w 5 irc-server 6667
#   (Or ncat instead of nc)
#
# Features:
#   - Set recipient with '>' (e.g. '> #channel')
#   - Send file with '< file.txt' (1 line/sec)
#   - Quick repeat of previous command with '/ <command>'
#   - Each input line is sent as privmsg to the current recipient
#   - Sends a "quit" on exit

# -- Start keepalive tick process --
if [ "$1" = "tick" ]; then
  # Ignore most signals so parent handles shutdown
  trap '' 1 2 3 13 14 15 16
  while true; do
    sleep 60
    echo "PONG :keepalive"
  done
  exit 0
fi

# Fire off the keepalive child and track its PID
sh "$0" tick &
ircpp=$!
echo "[Keepalive PID: $ircpp]" >&2

# Catch signals and clean up
trap 'kill -9 $ircpp; exit 0' 1 2 3 13 14 15 16

sleep 2

sender=''
savecmd=''

while read xx yy; do
  case "${xx}" in
    "")
      # blank line, ignore
      continue
      ;;
    ">")
      # Set current privmsg recipient
      if [ -n "$yy" ]; then
        sender="privmsg $yy :"
      else
        sender=""
      fi
      continue
      ;;
    "<")
      # Send file (one line per second)
      if [ -f "$yy" ]; then
        ( while read zz; do
            sleep 1
            echo "${sender}${zz}"
          done
        ) < "$yy"
        echo "[done sending file: $yy]" >&2
      else
        echo "[File $yy not found]" >&2
      fi
      continue
      ;;
    "/")
      # Save and repeat a command
      if [ -n "$yy" ]; then
        savecmd="$yy"
      fi
      echo "$savecmd"
      ;;
    *)
      # Default: send as privmsg (or as raw if no recipient set)
      echo "${sender}${xx} ${yy}"
      ;;
  esac
done

echo "quit :Bye all!"
kill -9 $ircpp
exit 0
