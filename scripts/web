#!/bin/sh
#
# web.sh - A minimalist command-line HTTP/1.0 GET client using netcat/ncat.
#
# Usage:
#   ./web.sh hostname [port]
#
# Features:
#   - No Referer or browser leaksâ€”pure GET requests only
#   - Supports relative/absolute paths, session save, and host/port changes
#   - All input/output via a temp file (safe for use in scripts)
#   - Works with both nc and ncat (Nmap)
#
# Controls (interactive):
#   Enter path/filename for each request (default "/")
#   HOST  -- change host
#   PORT  -- change port
#   SAVE  -- save output to a file
#   ..    -- go "up" a directory
#   \     -- clear filename (just request directory)
#   ?     -- show minimal help
#   (blank) -- repeat last request
#   EOF   -- quit

if [ -z "$1" ]; then
    echo "Usage: $0 hostname [port]" >&2
    exit 1
fi

PAGER="${PAGER:-more}"
NC="nc"
if $NC -h 2>&1 | grep -qi nmap; then
    IS_NCAT=1
else
    IS_NCAT=0
fi
BACKEND="$NC -v -w 15"
TMPAGE="/tmp/web$$"
host="$1"
port="${2:-80}"

spec="/"
specD="/"
specF=""
saving=""

# Clean up temp file at exit (trap handles Ctrl+C too)
cleanup() { rm -f "$TMPAGE"; }
trap cleanup EXIT INT

# Safety: be sure TMPAGE is not a symlink
rm -f "$TMPAGE"
if [ -f "$TMPAGE" ]; then
    echo "Can't use $TMPAGE" >&2
    exit 1
fi

while printf "%s%s " "$specD" "$specF" && read spec; do
  case "$spec" in
    HOST)
      printf 'New host: '
      read host
      continue
      ;;
    PORT)
      printf 'New port: '
      read port
      continue
      ;;
    SAVE)
      printf 'Save file: '
      read saving
      # If we've already got a page, save it
      [ -n "$saving" ] && [ -f "$TMPAGE" ] && {
        echo "=== $host:${specD}${specF} ===" >> "$saving"
        cat "$TMPAGE" >> "$saving"
        echo '' >> "$saving"
      }
      continue
      ;;
    /*)
      specF=$(echo "$spec" | sed 's|.*/||')
      specD=$(echo "$spec" | sed 's|\(.*/\).*|\1|')
      spec="$specD$specF"
      ;;
    */*)
      specF=$(echo "$spec" | sed 's|.*/||')
      specD=$(echo "$specD$spec" | sed 's|\(.*/\).*|\1|')
      ;;
    ..)
      specD=$(echo "$specD" | sed 's|\(.*/\)..*/|\1|')
      continue
      ;;
    "")
      # blank line: repeat previous
      ;;
    '\')
      specF=""
      ;;
    '?')
      echo "Minimalist shell web client:"
      echo " HOST   -- change host"
      echo " PORT   -- change port"
      echo " SAVE   -- save output to file"
      echo " ..     -- go up a directory"
      echo " \\     -- clear file (just request dir)"
      echo " (blank)-- repeat last request"
      echo " ?      -- this help"
      echo " EOF    -- quit"
      continue
      ;;
    *)
      specF="$spec"
      ;;
  esac

  # Reconstruct and fetch the URL
  spec="$specD$specF"
  # Some lame servers need an extra newline; see comment in original
  # If you need, change to: (echo GET "$spec"; echo '') | $BACKEND ...
  echo "GET $spec" | $BACKEND "$host" "$port" > "$TMPAGE"
  $PAGER "$TMPAGE"

  # Save history if enabled
  if [ -n "$saving" ]; then
    echo "=== $host:$spec ===" >> "$saving"
    cat "$TMPAGE" >> "$saving"
    echo '' >> "$saving"
  fi
done

rm -f "$TMPAGE"
exit 0
